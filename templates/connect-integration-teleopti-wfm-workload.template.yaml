AWSTemplateFormatVersion: '2010-09-09'
Description: TeleOpti WFM integration for Amazon Connect (qs-1ofbedn5h)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Teleopti SFTP Credentials
        Parameters:
          - SecurityGroupIds
          - SubnetIds
          - SFTPHostname
          - SFTPUserName
          - SFTPPassword
    ParameterLabels:
      SecurityGroupIds:
        default: List of security group IDs
      SubnetIds:
        default: List of subnet IDs
      SFTPUserName:
        default: 'Teleopti SFTP User ID:'
      SFTPPassword:
        default: 'Teleopti SFTP User Password:'
      SFTPHostname:
        default: 'Teleopti SFTP Hostname:'
Parameters:
  SFTPUserName:
    AllowedPattern: ^[a-zA-Z0-9_]+$
    ConstraintDescription: ' Password must contain only alphanumeric and underscore
      characters.'
    Type: String
    Description: The Teleopti provided username for your SFTP account.
  SFTPPassword:
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$
    ConstraintDescription: ' Password must be at least 8 characters, and contain uppercase
      and lowercase letters, and at least one numeric.'
    Type: String
    Description: The Teleopti provided password for your SFTP account.
    NoEcho: true
  SFTPHostname:
    Type: String
    Description: The Teleopti provided hostname of your SFTP server.
  SecurityGroupIds:
    Description: List of security group IDs in the VPC that should be attached to
      the Connect integration Lambda functions.
    Type: List<AWS::EC2::SecurityGroup::Id>
  SubnetIds:
    Description: 'List of subnet IDs in the VPC that should be attached to the Connect
      integration Lambda functions. Note: the route table associated with the subnet(s)
      must point to NAT Gateway for 0.0.0.0/0 destination, and the NAT Gateway must
      have an elastic IP address that has been whitelisted by Calabrio.'
    Type: List<AWS::EC2::Subnet::Id>
  TeleoptiIntegrationBucketName:
    Description: (Optional) The name of an existing bucket where your Amazon Connect reports are stored.
    Default: ''
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: connect-integration-teleopti-wfm/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Conditions:
  CreateTeleoptiIntegrationBucket: !Equals ['', !Ref 'TeleoptiIntegrationBucketName']
Rules:
  RegionSupport:
    Assertions:
      - Assert: !Contains
          - - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - ap-northeast-1
            - ap-northeast-2
            - ap-south-1
            - ap-southeast-1
            - ap-southeast-2
            - ca-central-1
            - eu-central-1
            - eu-west-1
            - eu-west-2
            - eu-west-3
            - sa-east-1
          - !Ref 'AWS::Region'
        AssertDescription: Region must support Amazon Connect Service.
Resources:
  TeleoptiMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 180
      QueueName: !Sub
        - teleopti-integration-${Param1}
        - Param1: !Select
            - '2'
            - !Split
              - /
              - !Ref 'AWS::StackId'
  S3ToSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: PushMessageToSQSPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: allow-s3-to-send-message-to-sqs
            Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Principal: '*'
            Resource: '*'
            Condition:
              ArnLike:
                aws:SourceArn: arn:aws:s3:::*
      Queues:
        - !Ref 'TeleoptiMessageQueue'
    DependsOn:
      - TeleoptiMessageQueue
  TeleoptiIntegrationTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DBSNetworkInterface
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  TeleoptiIntegrationTestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref 'QSS3BucketName'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/integration-test/lambda.zip'
      Handler: main.handle
      MemorySize: 256
      Role: !GetAtt 'TeleoptiIntegrationTestRole.Arn'
      Runtime: nodejs10.x
      VpcConfig:
        SecurityGroupIds: !Ref 'SecurityGroupIds'
        SubnetIds: !Ref 'SubnetIds'
      Timeout: 300
    DependsOn:
      - TeleoptiIntegrationTestRole
  TeleoptiIntegrationTest:
    Type: Custom::IntegrationTest
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'TeleoptiIntegrationTestFunction.Arn'
      host: !Ref 'SFTPHostname'
      port: 22
      password: !Ref 'SFTPPassword'
      username: !Ref 'SFTPUserName'
      sftpLocation: ''
    DependsOn:
      - TestTeleoptiLambdaLogGroup
  TeleoptiLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      CreateAfterS3BucketDependency:  !If [CreateTeleoptiIntegrationBucket, !Ref TeleoptiIntegrationBucket, !Ref TeleoptiIntegrationBucketName]
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogWriter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DBSNetworkInterface
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                Resource: '*'
        - PolicyName: FileSyncher
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !If [CreateTeleoptiIntegrationBucket, !Sub 'arn:aws:s3:::${TeleoptiIntegrationBucket}', !Sub 'arn:aws:s3:::${TeleoptiIntegrationBucketName}']
                  - !If [CreateTeleoptiIntegrationBucket, !Sub 'arn:aws:s3:::${TeleoptiIntegrationBucket}/*', !Sub 'arn:aws:s3:::${TeleoptiIntegrationBucketName}/*']
        - PolicyName: EventQueuer
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt 'TeleoptiMessageQueue.Arn'
    DependsOn:
      - TeleoptiMessageQueue
  TeleoptiIntegrationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - teleopti-integration-${Param1}
        - Param1: !Select
            - '2'
            - !Split
              - /
              - !Ref 'AWS::StackId'
      Code:
        S3Bucket: !Ref 'QSS3BucketName'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/integration/lambda.zip'
      Description: Used sync files between S3 and SFTP servers.
      Environment:
        Variables:
          s3Location: !If [CreateTeleoptiIntegrationBucket, !Ref TeleoptiIntegrationBucket, !Ref TeleoptiIntegrationBucketName]
          host: !Ref 'SFTPHostname'
          port: '22'
          password: !Ref 'SFTPPassword'
          username: !Ref 'SFTPUserName'
          sftpLocation: ''
          batchSize: 50
      Handler: main.handle
      MemorySize: 256
      Role: !GetAtt 'TeleoptiLambdaRole.Arn'
      Runtime: nodejs10.x
      VpcConfig:
        SecurityGroupIds: !Ref 'SecurityGroupIds'
        SubnetIds: !Ref 'SubnetIds'
      Timeout: 300
    DependsOn:
      - TeleoptiLambdaRole
  TeleoptiIntegrationBucket:
    Condition: CreateTeleoptiIntegrationBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 90
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt 'TeleoptiMessageQueue.Arn'
    DependsOn:
      - S3ToSQSPolicy
      - TeleoptiIntegrationTest
  TeleoptiFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Metadata:
      CreateAfterS3BucketDependency:  !If [CreateTeleoptiIntegrationBucket, !Ref TeleoptiIntegrationBucket, !Ref TeleoptiIntegrationBucketName]
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !If [CreateTeleoptiIntegrationBucket, !Sub 'arn:aws:s3:::${TeleoptiIntegrationBucket}', !Sub 'arn:aws:s3:::${TeleoptiIntegrationBucketName}']
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 10
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt 'TeleoptiLambdaRole.Arn'
    DependsOn:
      - TeleoptiLambdaRole
  TeleoptiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TeleoptiIntegrationFunction}'
      RetentionInDays: 7
  TestTeleoptiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TeleoptiIntegrationTestFunction}'
      RetentionInDays: 7
  TeleoptiExecuteEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled event to run SFTP Lambda for Teleopti Integration
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'TeleoptiIntegrationFunction.Arn'
          Id: !Select
            - '2'
            - !Split
              - /
              - !Ref 'AWS::StackId'
  TeleoptiResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'TeleoptiIntegrationFunction.Arn'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'TeleoptiExecuteEvent.Arn'
    DependsOn:
      - TeleoptiIntegrationFunction
  TeleoptiRTAGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: giveaccesstokinesis
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:Get*
                  - kinesis:List*
                  - kinesis:Describe*
                Resource: '*'
  TeleoptiRTAUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref 'TeleoptiRTAGroup'
    DependsOn:
      - TeleoptiRTAGroup
  TeleoptiRTAAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'TeleoptiRTAUser'
    DependsOn:
      - TeleoptiRTAUser
  FunctionTimeoutMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: Task timed out
      LogGroupName: !Sub '/aws/lambda/${TeleoptiIntegrationFunction}'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Ref 'AWS::StackName'
          MetricName: lambda-function-timeouts
    DependsOn:
      - TeleoptiIntegrationFunction
      - TeleoptiLambdaLogGroup
  ConnectionTimeoutMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: ClientTimeoutException
      LogGroupName: !Sub '/aws/lambda/${TeleoptiIntegrationFunction}'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Ref 'AWS::StackName'
          MetricName: connection-timeouts
    DependsOn:
      - TeleoptiIntegrationFunction
      - TeleoptiLambdaLogGroup
  ErrorMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: UnknownException
      LogGroupName: !Sub '/aws/lambda/${TeleoptiIntegrationFunction}'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Ref 'AWS::StackName'
          MetricName: errors
    DependsOn:
      - TeleoptiIntegrationFunction
      - TeleoptiLambdaLogGroup
  S3toSFTPMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '[timestamp, requestId, streamName, colon, moved = Moved, numFiles,
        files = files, from, orig = S3, to, dest = SFTP]'
      LogGroupName: !Sub '/aws/lambda/${TeleoptiIntegrationFunction}'
      MetricTransformations:
        - MetricValue: $numFiles
          MetricNamespace: !Ref 'AWS::StackName'
          MetricName: s3-to-sftp
    DependsOn:
      - TeleoptiIntegrationFunction
      - TeleoptiLambdaLogGroup
Outputs:
  TeleoptiIntegrationFunctionArn:
    Description: The ARN of the function that moves files between S3 and SFTP.
    Value: !GetAtt 'TeleoptiIntegrationFunction.Arn'
  TeleoptiIntegrationFunctionName:
    Description: The Name of the function that moves files between S3 and SFTP.
    Value: !Ref 'TeleoptiIntegrationFunction'
  TeleoptiIntegrationFunctionRole:
    Description: The role used by the generated Lambda function, to be added to any
      KMS keys.
    Value: !Ref 'TeleoptiLambdaRole'
  FirehoseDeliveryStreamName:
    Description: The Firehose Delivery Stream to assign for CTR and Report Delivery.
    Value: !Ref 'TeleoptiFirehoseDeliveryStream'
  RTAIAMUserName:
    Description: The UserName of the RTA IAM User.
    Value: !Ref 'TeleoptiRTAUser'
  AccessKeyforTeleoptiRTA:
    Value: !Ref 'TeleoptiRTAAccessKey'
  SecretKeyforTeleoptiRTA:
    Value: !GetAtt 'TeleoptiRTAAccessKey.SecretAccessKey'
